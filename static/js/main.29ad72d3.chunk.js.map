{"version":3,"sources":["logo.svg","components/header.jsx","components/Home.jsx","components/Predict.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","style","color","Component","Home","Predict","props","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qKAAAA,EAAOC,QAAU,IAA0B,kC,ofCiD3BC,G,OA5ChB,4JAaE,WAEE,OACE,6BACE,yBAAKC,UAAU,UACb,yBAAKA,UAAU,eACb,yBAAKA,UAAU,QAEb,yBAAKA,UAAU,WACb,uBAAGA,UAAU,QAAQC,MAAO,CAACC,MAAM,UAAnC,kCAGJ,yBAAKF,UAAU,SACb,qCA1Bd,GAA4BG,cCDb,SAASC,IACpB,OACI,6BACI,kBAAC,EAAD,MACA,yBAAKJ,UAAU,uBACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,WACX,yBAAKA,UAAU,SAAf,cACA,yBAAKA,UAAU,OACX,kBAAC,IAAD,W,WCcbK,EAvBf,kDACI,WAAYC,GAAO,uCACTA,GAFd,0CAME,WACE,OACE,6BACI,kBAAC,EAAD,MACE,yBAAKN,UAAU,cACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,WACX,yBAAKA,UAAU,SAAf,sBAbxB,GAA6BG,aCoBdI,MAff,WACE,OACE,kBAAC,IAAD,KACA,yBAAKP,UAAU,OACf,kBAAC,IAAD,KACG,kBAAC,IAAD,CAAOQ,KAAK,IAAIC,OAAK,EAACC,UAAWN,IACjC,kBAAC,IAAD,CAAOI,KAAK,WAAWC,OAAK,EAACC,UAAWL,QCH3BM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OAAO,kBAAC,EAAD,MACdC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.29ad72d3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport './header.css'\n/* import $ from \"jquery\" */\nimport { NavLink } from 'react-router-dom';\n\nexport class Header extends Component {\n\n  \n /*  componentDidMount() {\n    $(window).on('scroll', function () {\n      if ($(window).scrollTop()) {\n        $('nav').addClass('black');\n      }\n      else {\n        $('nav').removeClass('black');\n      }\n    })\n  } */\n  render() {\n    \n    return (\n      <div>\n        <nav className=\"header\">\n          <div className=\"header-wrap\">\n            <div className=\"left\">\n            {/*   <img src={logo} alt=\"\" /> */}\n              <div className=\"content\">\n                <p className=\"title\" style={{color:'white'}}>Image Classifier | Predictor</p>\n              </div>\n            </div>\n            <div className=\"right\">\n              <ul>\n                {/* <li><NavLink  exact activeClassName=\"active\" to=\"/\" ><button>TRAIN</button></NavLink></li>\n                <li><NavLink  exact activeClassName=\"active\" to=\"/predict\"><button>PREDICT</button></NavLink></li> */}\n{/*                 <li><NavLink  exact activeClassName=\"active\" to=\"/form\"><button>FORM</button></NavLink></li> */}\n              </ul>\n            </div>\n          </div>\n        </nav>\n        \n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  auth:state.auth\n });\n\nexport default (Header);\n","import React from 'react'\nimport MLClassifierUI from 'ml-classifier-ui'\nimport Header from './header'\n\nexport default function Home() {\n    return (\n        <div>\n            <Header/>\n            <div className=\"hero first is-light\">\n                <div className=\"container\">\n                    <div className=\"section\">\n                        <div className=\"title\">Train data</div>\n                        <div className=\"box\">\n                            <MLClassifierUI/>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n","import React, { Component } from 'react';\nimport Header from './header';\nimport {loadMobilenet} from '../training/index'\n\nexport class Predict extends Component {\n    constructor(props){\n        super(props);\n\n    }\n  \n  render() {\n    return (\n      <div>\n          <Header/>\n            <div className=\"hero first\">\n                <div className=\"container\">\n                    <div className=\"section\">\n                        <div className=\"title\">Prediction</div>\n                    </div>\n                </div>\n\n            </div>\n      </div>\n    );\n  }\n}\n\nexport default Predict;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { HashRouter as Router,Route,Switch,Redirect} from 'react-router-dom'\nimport MLClassifierUI from 'ml-classifier-ui';\nimport Header from './components/header'\nimport Home from './components/Home'\nimport Predict from './components/Predict'\n\nfunction App() {\n  return (\n    <Router>\n    <div className=\"App\">\n    <Switch>\n       <Route path=\"/\" exact component={Home}/>\n       <Route path=\"/predict\" exact component={Predict}/>\n                    \n     </Switch>\n      \n    </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(<App />\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}